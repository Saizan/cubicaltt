module pi1s2 where

import truncS2
import thm7312

pi1S2 : U = sTrunc loopS2

incN : gTrunc S2 = inc north

cor7312 : Id U pi1S2 (Id (gTrunc S2) incN incN) =
 thm7312 S2 north north

propPi1S2 : prop pi1S2 =
 substInv U prop pi1S2 (Id (gTrunc S2) incN incN)  cor7312
    (propSet (gTrunc S2) propgTruncS2 incN incN)

meridS2 : Id S2 north south = <i>merid{S2} base@i

trivS2 : pi1S2 = inc (refl S2 north)
loopS2 : pi1S2 = inc (compId S2 north south north meridS2 (<i>meridS2@-i))

test : Id pi1S2 trivS2 loopS2 = propPi1S2 trivS2 loopS2
test1 : Id pi1S2 trivS2 trivS2 = propPi1S2 trivS2 trivS2

-- we can transport this since S1 = susp bool

eqS1 : Id U S1 sone = <i>s1EqCircle@-i

eqS2 : Id U S2 stwo = <i>susp (eqS1@i)

pi1stwo : U = sTrunc (Id stwo north north) 

eqPi1 : Id U pi1S2 pi1stwo = <i>sTrunc (Id (susp (eqS1@i)) north north)

propPi1stwo : prop pi1stwo = subst U prop pi1S2 pi1stwo eqPi1 propPi1S2

meridNstwo : Id stwo north south = <i>merid{stwo} north@i
meridSstwo : Id stwo north south = <i>merid{stwo} south@i
trivstwo : pi1stwo = inc (refl stwo north)
loopstwo : pi1stwo = inc (compId stwo north south north meridNstwo (<i>meridSstwo@-i))

test2 : Id pi1stwo trivstwo trivstwo = propPi1stwo trivstwo trivstwo

test3 : Id pi1stwo trivstwo loopstwo = propPi1stwo trivstwo loopstwo

