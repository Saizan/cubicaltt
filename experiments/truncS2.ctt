module truncS2 where

import ex1
import indSusp
import susp
import groupoidTrunc

-- is X is a set then Id U (aLoop X) X

lemLoopSet (X:U) (sX: set X) : Id U (aLoop X) X
 = isoId (aLoop X) X f g s t
 where
   f (z:  aLoop X) : X =  z.1
   g (x: X) : aLoop X =  (x,refl X x)
   s (y : X) : Id X (f (g y)) y =  refl X y
   t (z : aLoop X) : Id (aLoop X) (g (f z)) z = <i>(z.1,sX z.1 z.1 (refl X z.1) z.2@i)

lemS1Set (X : U) (sX: set X) : Id U (S1 -> X) X =
 compId U (S1 -> X) (aLoop X) X (<i>thm X@-i) (lemLoopSet X sX)

lemGrp1 (X : U) (gX: groupoid X) : Id U (suspOf S1 X) ((u:X) * (v : X) * Id X u v)
   = <i> (u:X) * (v:X) * (lemS1Set (Id X u v) (gX u v) @ i)
 
lemIdSig (X:U) :  Id U ((u:X) * (v:X) * Id X u v) X = isoId  ((u:X) * (v:X) * Id X u v) X f g s t
 where
  Z : U = (u:X) * (v:X) * Id X u v
  f (z:Z) : X = z.1
  g (x : X) : Z = (x,(x,refl X x))
  s (y:X) : Id X (f (g y)) y = refl X y
  t (z:Z) : Id Z (g (f z)) z = <i>(z.1,contrSingl X z.1 z.2.1 z.2.2 @ i)

lemGrp2 (X : U) (gX:groupoid X) : Id U (suspOf S1 X) X = 
 compId U (suspOf S1 X) ((u:X) * (v:X) * Id X u v) X (lemGrp1 X gX) (lemIdSig X)

lemGrp3 (X : U) (gX: groupoid X) : Id U (S2 -> X) X =
 compId U (S2 -> X) (suspOf S1 X) X (funSusp S1 X) (lemGrp2 X gX)

test (X:U) (gX: groupoid X) (f:S2 -> X) : X = transport (lemGrp3 X gX) f

lemGrp4 (X : U) (gX:groupoid X) : Id U (gTrunc S2 -> X) X
 = compId U (gTrunc S2 -> X) (S2 -> X) X (univG S2 X gX) (lemGrp3 X gX)

corr : Id U (gTrunc S2 -> gTrunc S2) (gTrunc S2) = lemGrp4 (gTrunc S2) (gTr S2)

lemTransport (A B :U) (p : Id U A B) (a0 a1 : A) (h: Id B (transport p a0) (transport p a1)) : Id A a0 a1 =
 transport (<i>Id (p@-i) (transport (<j>p@(-i/\j)) a0) (transport (<j>p@(-i/\j)) a1)) h


corr1 : Id (gTrunc S2 -> gTrunc S2) (\ (x:gTrunc S2) -> x) (\ (x:gTrunc S2) -> inc north) =
 lemTransport (gTrunc S2 -> gTrunc S2) (gTrunc S2) corr 
              (\ (x:gTrunc S2) -> x) (\ (x:gTrunc S2) -> inc north) (refl (gTrunc S2) (inc north))

corr2 (x:gTrunc S2) : Id (gTrunc S2) x (inc north) = <i> corr1@i x 

propgTruncS2 : prop (gTrunc S2) =
 \ (x y : gTrunc S2) -> compId (gTrunc S2) x (inc north) y (corr2 x) (<i>corr2 y@-i)


test : Id (gTrunc S2) (inc south) (inc north) = corr2 (inc south)

-- normal form

test : Id (gTrunc S2) (inc south) (inc north) = 
 <i> inc (comp S2 north 
         [ (i = 0) -> <j> comp S2 south 
          [ (j = 0) -> <k> comp S2 north
           [ (k = 0) -> <l> comp S2 south
            [ (l = 0) -> <m> comp S2 north
             [ (m = 0) -> <n> comp S2 south 
              [ (n = 0) -> <p> comp S2 north 
               [ (p = 0) -> <q> comp S2 north [ (q = 1) -> <r> merid {S2} base @ r ] ] ] ] ] ] ] ])

test1 : Id (gTrunc S2) (inc north) (inc north) = corr2 (inc north)

test1 : Id (gTrunc S2) (inc north) (inc north) = compId (gTrunc S2) (inc north) (inc south) (inc north) (<i>test@-i) test

-- this should imply that any element in gTrunc (susp sone) is equal to inc north

stwo : U = susp sone

corr3 : (x:gTrunc stwo) -> Id (gTrunc stwo) x (inc north) =
 transport (<i>(x:gTrunc (susp (s1EqCircle@-i))) -> Id (gTrunc (susp (s1EqCircle@-i))) x (inc north)) corr2

test2 : Id (gTrunc stwo) (inc south) (inc north) = corr3 (inc south)

-- normal form

test2 : Id (gTrunc stwo) (inc south) (inc north) = 
 <i> inc (comp stwo north 
     [ (i = 0) -> <j> comp stwo south 
      [ (j = 0) -> <k> comp stwo north 
       [ (k = 0) -> <l> comp stwo south 
        [ (l = 0) -> <m> comp stwo north 
         [ (m = 0) -> <n> comp stwo south 
          [ (n = 0) -> <p> comp stwo north 
           [ (p = 0) -> <q> comp stwo north 
            [ (q = 1) -> <r> merid {stwo} north @ r ] ] ] ] ] ] ] ])
