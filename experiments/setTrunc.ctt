module setTrunc where

import set

data sTrunc (A : U)
  = inc (a : A)
  | setTrC (a b : sTrunc A) (p q : Id (sTrunc A) a b) <i j>
       [ (i=0) -> p @ j
       , (i=1) -> q @ j
       , (j=0) -> a
       , (j=1) -> b]

sTr (A : U) (a b : sTrunc A) (p q : Id (sTrunc A) a b) : Id (Id (sTrunc A) a b) p q =
  <i j> setTrC {sTrunc A} a b p q @ i @ j

-- sTruncSet (A : U) : set (sTrunc A) =
--    \(a b : sTrunc A) (p q : Id (sTrunc A) a b) ->
--      <i j> setTrC {sTrunc A} a b p q @ i @ j

sTruncRec (A : U)
            (B : U)
            (bS : set B)
            (f : A -> B) :
            sTrunc A -> B =
  split
    inc a -> f a
    setTrC a b p q @ i j -> (bS (sTruncRec A B bS f a)
                               (sTruncRec A B bS f b)
                               (<k> sTruncRec A B bS f (p @ k))
                               (<k> sTruncRec A B bS f (q @ k))) @ i @ j

sTruncElim (A : U) (P : sTrunc A -> U) (sP : (z : sTrunc A) -> set (P z)) (h : (x : A) -> P (inc x))
  : (z : sTrunc A) -> P z = split
    inc a -> h a
    setTrC a b p q @ i j -> sqDepPath2 (sTrunc A) P sP a b p q (sTr A a b p q)
                                       (f a) (f b) (<k> f (p @ k)) (<k> f (q @ k)) @ i @ j
      where f : (z : sTrunc A) -> P z = sTruncElim A P sP h