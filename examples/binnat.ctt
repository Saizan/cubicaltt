module binnat where

import univalence
import nat

-- Positive binary numbers like in Coq
data pos = pos1
         | x0 (p : pos) 
         | x1 (p : pos)

sucPos : pos -> pos = split
  pos1 -> x0 pos1
  x0 p -> x1 p
  x1 p -> x0 (sucPos p)

doubleN : nat -> nat = split
  zero  -> zero
  suc n -> suc (suc (doubleN n))

PosToN : pos -> nat = split
  pos1 -> suc zero
  x0 p -> doubleN (PosToN p)
  x1 p -> suc (doubleN (PosToN p))

posInd (P : pos -> U) (h1 : P pos1) (hS : (p : pos) -> P p -> P (sucPos p)) (p : pos) : P p =
  let H (p : pos) (hx0p : P (x0 p)) : P (x0 (sucPos p)) = hS (x1 p) (hS (x0 p) hx0p)
      f : (p : pos) -> P p = split
        pos1 -> h1
        x0 p -> posInd (\(p : pos) -> P (x0 p)) (hS pos1 h1) H p
        x1 p -> hS (x0 p) (posInd (\(p : pos) -> P (x0 p)) (hS pos1 h1) H p)
  in f p

sucPosSuc : (p : pos) -> Id nat (PosToN (sucPos p)) (suc (PosToN p)) = split
  pos1 -> <_> suc (suc zero)
  x0 p -> <_> suc (doubleN (PosToN p))
  x1 p -> <i> doubleN (sucPosSuc p @ i)

zeronPosToN (p : pos) : neg (Id nat zero (PosToN p)) =
  posInd (\(p : pos) -> neg (Id nat zero (PosToN p))) (\(prf : Id nat zero one) -> znots zero prf) hS p
   where
   hS (p : pos) (_ : neg (Id nat zero (PosToN p))) (prf : Id nat zero (PosToN (sucPos p))) : N0 =
    znots (PosToN p) (<i> comp (<j> nat) (prf @ i) [ (i=0) -> <_> zero, (i = 1) -> sucPosSuc p ])

-- Inverse of PosToN:
NtoPos' : nat -> pos = split
  zero -> pos1
  suc n -> sucPos (NtoPos' n)

NtoPos : nat -> pos = split
  zero  -> pos1
  suc n -> NtoPos' n

PosToNK : (n : nat) -> Id nat (PosToN (NtoPos (suc n))) (suc n) = split
  zero  -> <_> (suc zero)
  suc n ->
    let ih : Id nat (suc (PosToN (NtoPos' n))) (suc (suc n)) = <i> suc (PosToNK n @ i)
    in compId nat (PosToN (NtoPos (suc (suc n)))) (suc (PosToN (NtoPos' n)))
             (suc (suc n)) (sucPosSuc (NtoPos' n)) ih

NtoPosSuc : (n : nat) -> neg (Id nat zero n) -> Id pos (NtoPos (suc n)) (sucPos (NtoPos n)) = split
  zero -> \(p : neg (Id nat zero zero)) -> efq (Id pos (NtoPos (suc zero)) (sucPos (NtoPos zero))) (p (<_> zero))
  suc n -> \(_ : neg (Id nat zero (suc n))) -> <_> (sucPos (NtoPos' n))


NtoPosK (p:pos) : Id pos (NtoPos (PosToN p)) p
 = posInd (\(p:pos) -> Id pos (NtoPos (PosToN p)) p) (refl pos pos1) hS p
 where
  hS (p : pos) (hp: Id pos (NtoPos (PosToN p)) p) :  Id pos (NtoPos (PosToN (sucPos p))) (sucPos p)
   =
    let H1 : Id pos (NtoPos (PosToN (sucPos p))) (NtoPos (suc (PosToN p)))
         = mapOnPath nat pos NtoPos (PosToN (sucPos p)) (suc (PosToN p)) (sucPosSuc p)

        H2 : Id pos (NtoPos (suc (PosToN p))) (sucPos (NtoPos (PosToN p)))
         = NtoPosSuc (PosToN p) (zeronPosToN p)

        H3 : Id pos (sucPos (NtoPos (PosToN p))) (sucPos p)
         = mapOnPath pos pos sucPos (NtoPos (PosToN p)) p hp
    in compId pos (NtoPos (PosToN (sucPos p))) (sucPos (NtoPos (PosToN p))) (sucPos p)
         (compId pos (NtoPos (PosToN (sucPos p))) (NtoPos (suc (PosToN p))) (sucPos (NtoPos (PosToN p))) H1 H2)
         H3

posToNinj : injective pos nat PosToN
 = \ (p0 p1:pos) (h:Id nat (PosToN p0) (PosToN p1)) ->
       <i> comp (<_>pos) (NtoPos (h@i)) [(i=0) -> NtoPosK p0,(i=1) -> NtoPosK p1]

-- Binary natural numbers
data binN = binN0 | binNpos (p : pos)

NtoBinN : nat -> binN = split
  zero  -> binN0
  suc n -> binNpos (NtoPos (suc n))

BinNtoN : binN -> nat = split
  binN0     -> zero
  binNpos p -> PosToN p

NtoBinNK : (n:nat) -> Id nat (BinNtoN (NtoBinN n)) n = split
  zero  -> refl nat zero
  suc n -> PosToNK n

rem (p : pos) : Id binN (NtoBinN (PosToN (sucPos p))) (binNpos (sucPos p)) =
 compId binN (NtoBinN (PosToN (sucPos p))) (binNpos (NtoPos (suc (PosToN p))))
                 (binNpos (sucPos p)) rem1 rem2
     where
      rem1 : Id binN (NtoBinN (PosToN (sucPos p))) (binNpos (NtoPos (suc (PosToN p))))
           = mapOnPath nat binN NtoBinN (PosToN (sucPos p)) (suc (PosToN p)) (sucPosSuc p)

      rem2 : Id binN (binNpos (NtoPos (suc (PosToN p)))) (binNpos (sucPos p))
           = <i>binNpos 
                (compId pos (NtoPos (suc (PosToN p))) (sucPos (NtoPos (PosToN p))) (sucPos p)
                (NtoPosSuc (PosToN p) (zeronPosToN p))
                (mapOnPath pos pos sucPos (NtoPos (PosToN p)) p (NtoPosK p))@i)

lem1 (p : pos) : Id binN (NtoBinN (PosToN p)) (binNpos p)
       = posInd (\ (p:pos) -> Id binN (NtoBinN (PosToN p)) (binNpos p)) (refl binN (binNpos pos1))
                (\ (p:pos) (_:Id binN (NtoBinN (PosToN p)) (binNpos p)) -> rem p) p

BinNtoNK : (b:binN) -> Id binN (NtoBinN (BinNtoN b)) b = split --  retract binN N BinNtoN NtoBinN = split
  binN0     -> refl binN binN0
  binNpos p -> lem1 p

IdbinNN : Id U binN nat
 = isoId binN nat BinNtoN NtoBinN NtoBinNK BinNtoNK

-- Doubling

one : nat   = suc zero
two : nat   = suc one
three : nat = suc two
four : nat  = suc three
five : nat  = suc four

-- doublesN n m = 2^n * m
doublesN : nat -> nat -> nat = split
  zero  -> \(m:nat) -> m
  suc n -> \(m:nat) -> doublesN n (doubleN m)

addN (n:nat) : nat -> nat = split
 zero -> n
 suc m -> suc (addN n m)

n1024 : nat = doublesN (addN four four) four

doubleBinN : binN -> binN = split
  binN0     -> binN0
  binNpos p -> binNpos (x0 p)

doublesBinN : nat -> binN -> binN = split
  zero  -> \(m:binN) -> m
  suc n -> \(m:binN) -> doublesBinN n (doubleBinN m)

-- Doubling structure
data Double =
  D (A : U) -- carrier
    (double : A -> A) -- doubling function computing 2 * x
    (elt : A) -- element to double

carrier : Double -> U 
 = split D c _ _ -> c

double : (D : Double) -> (carrier D -> carrier D)
 = split D _ op _ -> op

elt : (D : Double) -> carrier D
 = split D _ _ e -> e

DoubleN : Double = D nat doubleN n1024

DoubleBinN : Double = D binN doubleBinN (NtoBinN n1024)

-- iterate
iter (A : U) : nat -> (A -> A) -> A -> A = split
  zero  -> \(f:A->A) (z:A) -> z
  suc n -> \(f:A->A) (z:A) -> f (iter A n f z)

-- 2^10 * e = 2^5 * (2^5 * e)
propDouble (D : Double) : U
 = Id (carrier D) (iter (carrier D) (doubleN five) (double D) (elt D))
                              (iter (carrier D) five (double D) (iter (carrier D) five (double D) (elt D)))

-- The property we want to prove that takes long to typecheck:
-- 2^10 * 1024 = 2^5 * (2^5 * 1024)
-- propN : propDouble DoubleN
-- propN = refl N (doublesN (addN five five) n1024)

-- With binary numbers it is instant
propBin : propDouble DoubleBinN
 = refl binN (doublesBinN (addN five five) (elt DoubleBinN))

-- Define intermediate structure:
doubleBinN' (b:binN) : binN
 = NtoBinN (doubleN (BinNtoN b))

DoubleBinN' : Double
 = D binN doubleBinN' (NtoBinN n1024)

eqDouble1 : Id Double DoubleN DoubleBinN'
 = elimIsIso nat (\(B : U) (f : nat -> B) (g : B -> nat) -> Id Double DoubleN (D B (\(b : B) -> f (doubleN (g b))) (f n1024)))
             (refl Double DoubleN) binN NtoBinN BinNtoN BinNtoNK NtoBinNK

eqDouble2 : Id Double DoubleBinN' DoubleBinN
 = mapOnPath (binN -> binN) Double F doubleBinN' doubleBinN rem
  where
   F (d:binN -> binN) : Double
    = D binN d (NtoBinN n1024)

   rem : Id (binN -> binN) doubleBinN' doubleBinN
    = funExt binN (\(x:binN) -> binN) doubleBinN' doubleBinN rem1
    where
     rem1 : (n : binN) -> Id binN (doubleBinN' n) (doubleBinN n)
      = split
      binN0     -> refl binN binN0
      binNpos p ->
        let p1 : Id binN (NtoBinN (doubleN (PosToN p))) (NtoBinN (PosToN (x0 p)))
             = mapOnPath nat binN NtoBinN (doubleN (PosToN p)) (PosToN (x0 p)) (refl nat (doubleN (PosToN p)))
        in compId binN (NtoBinN (doubleN (PosToN p))) (NtoBinN (PosToN (x0 p))) (binNpos (x0 p)) p1 (lem1 (x0 p))

eqDouble : Id Double DoubleN DoubleBinN
 = compId Double DoubleN DoubleBinN' DoubleBinN eqDouble1 eqDouble2

-- opaque doubleN

-- goal : propDouble DoubleN = substInv Double propDouble DoubleN DoubleBinN eqDouble propBin

