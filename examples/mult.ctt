module mult where

import circle

-- another inverse function

invS : S1 -> S1 = split
 base -> base
 loop @ i -> loop1 @ -i

test (x:S1) : S1 = mult x (invS x)
testL : Id S1 base base = <i>test (loop{S1} @ i)
test1 (x:S1) : S1 = mult (invS x) x

-- test0S : Z = winding (<i>mult (loop2@i) (invS (loop2@i)))
-- loop4 : loopS1 = compS1 loop2 loop2
-- test00S : Z = winding (<i>mult (loop4@i) (invS (loop4@i)))

-- lemInv1 : (x:S1) -> Id S1 (mult (invS x) x) base = split
-- base -> refl S1 base
-- loop @ i -> <j> base -- loop1 @ -i\/i\/j

test2 : loopS1 = <i> mult (loop1@i) (loop1@-i)
-- test1 : IdP (<i>Id S1 (mult (loop1@i) base) (mult (loop1@i) base)) loop1 loop1 = <i j> mult (loop1@i) (loop1@j)
test3 : loopS1 = <i> mult (loop1@i) (loop1@i)
-- test3 : Id loopS1 test2 (compS1 loop1 loop1) = refl loopS1 test2

-- lemBase (y:S1) : Id S1 (mult base (mult base y)) y = 
-- compId S1 (mult base (mult base y)) (mult base y) y (idL (mult base y)) (idL y)

-- corrInv (x y : S1) : Id S1 (mult x (mult (invS x) y)) y =
--  compId S1 (mult x (mult (invS x) y)) (mult (mult x (invS x)) y) y rem1 rem
--  where rem1 : Id S1 (mult x (mult (invS x) y)) (mult (mult x (invS x)) y) = multAssoc x (invS x) y

--        rem : Id S1 (mult (mult x (invS x)) y) y =
--         compId S1 (mult (mult x (invS x)) y) (mult base y) y  (<i>mult (lemInv x @i) y) (idL y)

-- corrInv1 (x y : S1) : Id S1 (mult (invS x) (mult x y)) y =
--  compId S1 (mult (invS x) (mult x y)) (mult (mult (invS x) x) y) y rem1 rem
--  where rem1 : Id S1 (mult (invS x) (mult x y)) (mult (mult (invS x) x) y) = multAssoc (invS x) x y

--        rem : Id S1 (mult (mult (invS x) x) y) y =
--         compId S1 (mult (mult (invS x) x) y) (mult base y) y (<i>mult (lemInv1 x@i) y) (idL y)

-- eqS1 (x:S1) : Id U S1 S1 = isoId S1 S1 (mult x) (mult (invS x)) (corrInv x) (corrInv1 x)

