module stream where

import prelude
import nat


Stream (A : U) : U
  = Nu (\ (X : U) -> and A X)

cons (A : U) (x : A) (xs : Stream A) : Stream A
  = In (x , xs) []


head (A : U) (xs : Stream A) : A
  = (out xs).1

tail (A : U) (xs : Stream A) : Stream A
  = (out xs).2

eta (A : U) (xs : Stream A) : Id (Stream A) (cons A (head A xs) (tail A xs)) xs
 .@ i = In (out xs) [ (i=0) -> (cons A (head A xs) (tail A xs)) , (i = 1) -> xs ]

caseS (A : U) (P : Stream A -> U) (p : (n : A) (s : Stream A) -> P (cons A n s)) (s : Stream A) : P s
  = transport (<i> P (eta A s @ i)) (p (head A s) (tail A s))

splitS (A : U) (s : Stream A) (P : Stream A -> U) (p : (n : A) (s : Stream A) -> P (cons A n s)) : P s
  = transport (<i> P (eta A s @ i)) (p (head A s) (tail A s))

map (f : nat -> nat) (s : Stream nat) : (Stream nat)
 = In (f (head nat s) , map f (tail nat s)) []


mapid (s : Stream nat) : Id (Stream nat) (map (\ (x : nat) -> x) s) s
 .@ i = In (head nat s , mapid (tail nat s) @ i) [ (i=0) -> map (\ (x : nat) -> x) s, (i=1) -> s ]

zeros : Stream nat
  = In (zero , zeros) []


bisim (A : U) (R : (x y : Stream A) -> U) (ht : (x y : Stream A) -> R x y -> Id A (head A x) (head A y))
              (pt : (x y : Stream A) -> R x y -> R (tail A x) (tail A y))
              (x y : Stream A) (r : R x y) : Id (Stream A) x y
 .@ i = In (ht x y r @ i , bisim A R ht pt (tail A x) (tail A y) (pt x y r) @ i) [ (i=0) -> x, (i=1) -> y]


nth (A : U) (xs : Stream A) : nat -> A
 = split
     zero -> head A xs
     suc n -> nth A (tail A xs) n

isNth (A : U) (x : A) (xs : Stream A) (n : nat) : U
  = Id A (nth A xs n) x


hasZeros : (n : nat) -> isNth nat zero zeros n
 = split
     zero -> <i> zero
     suc n -> hasZeros n

transportExample (n : nat) : isNth nat zero (map (\ (n : nat) -> n) zeros) n
  = transport (<i> isNth nat zero (mapid zeros @ -i) n) (hasZeros n)

testComp : Id (Stream nat) zeros zeros
  = <i> comp (<_> Stream nat) (mapid zeros @ -i)
               [ (i=1) -> mapid zeros, (i=0) -> <_> zeros ]

testCompHead : Id nat zero zero
  = <i> head nat (testComp @ i)
