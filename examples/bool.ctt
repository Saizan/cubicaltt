module bool where

import prelude

data bool = false | true

      ---------------------------------------------------------
      -- Example: Non-trivial equality between bool and bool --
      ---------------------------------------------------------

negBool : bool -> bool = split
  false -> true
  true  -> false

-- negBool is involutive:
negBoolK : (b : bool) -> Id bool (negBool (negBool b)) b = split
  false -> refl bool false
  true -> refl bool true

-- This defines a non-trivial equality between bool and bool:
negBoolEq : Id U bool bool =
  isoId bool bool negBool negBool negBoolK negBoolK

-- We can transport true along this non-trivial equality:
testFalse : bool = transport negBoolEq true




-- An isomorphic representation to bool:

data F2 = zeroF2 | oneF2

f2ToBool : F2 -> bool = split
  zeroF2 -> false
  oneF2 -> true

boolToF2 : bool -> F2 = split
  false -> zeroF2
  true -> oneF2

f2ToBoolK : (x : F2) -> Id F2 (boolToF2 (f2ToBool x)) x = split
  zeroF2 -> refl F2 zeroF2
  oneF2 -> refl F2 oneF2

boolToF2K : (b : bool) -> Id bool (f2ToBool (boolToF2 b)) b = split
  false -> refl bool false
  true -> refl bool true

boolEqF2 : Id U bool F2 =
 isoId bool F2 boolToF2 f2ToBool f2ToBoolK boolToF2K
  
negF2 : F2 -> F2 = subst U (\(X : U) -> (X -> X)) bool F2 boolEqF2 negBool

-- lemTest (A : U) : (B : U) (p : Id U A B) (a : A) -> IdP p a (transport p a) =
--   J U A (\(B : U) (p : Id U A B) -> (a : A) -> IdP p a (transport p a)) (refl A)

-- test : IdP boolEqF2 true oneF2 = <i> glueElem oneF2 [ (i = 0) -> true ]
-- test1 : IdP boolEqF2 true oneF2 = lemTest bool F2 boolEqF2 true

F2EqBool : Id U F2 bool = inv U bool F2 boolEqF2

negBool' : bool -> bool = subst U (\(X : U) -> (X -> X)) F2 bool F2EqBool negF2

F2EqBoolComp : Id U F2 bool =
  compId U F2 bool bool F2EqBool negBoolEq

test2 : bool = trans F2 bool F2EqBoolComp oneF2

negNegEq : Id U bool bool =
  compId U bool bool bool negBoolEq negBoolEq

test3 : bool = trans bool bool negNegEq true
test4 : Id U bool bool = <i> negNegEq @ i

kanBool : Id U bool bool =
  kan U bool bool bool bool negBoolEq negBoolEq negBoolEq

squareBoolF2 : Square U bool bool bool F2 (refl U bool)
                  boolEqF2 (refl U bool) boolEqF2 =
  <i j> boolEqF2 @ i /\ j

test5 : IdP boolEqF2 true oneF2 = 
  <i> comp (<j> boolEqF2 @ i /\ j) true []

test6 : Id bool true true =
  <i> comp (<j> F2EqBool @ i \/ j) (test5 @ - i) []

test7 : Id U F2 F2 =
  subst U (\(X:U) -> Id U X X) bool F2 boolEqF2 negNegEq

test8 : Id U F2 F2 =
  subst U (\(X:U) -> Id U X X) bool F2 boolEqF2 (refl U bool)

test9 : Id U F2 F2 =
  comp (<i> Id U (boolEqF2 @ i) (boolEqF2 @ i)) (refl U bool) []

p : Id U F2 bool = <i> comp (<_> U) bool [ (i = 0) -> boolEqF2, (i = 1) -> <_> bool]
q : Id U F2 F2 = <i> p @ (i /\ - i)