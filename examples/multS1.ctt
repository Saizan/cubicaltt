module multS1 where

import susp
import equiv

-- another inverse function

-- the multiplication is invertible

lemPropFib (P:S1 -> U) (pP:(x:S1) -> prop (P x)) (bP: P base) : (x:S1) -> P x = split
 base -> bP
 loop @ i -> (lemPropF S1 P pP base base loop1 bP bP) @ i

idL : (x : S1) -> Id S1 (mult base x) x = split
       base -> refl S1 base
       loop @ i -> <j> loop1 @ i


multIsEquiv : (x:S1) -> isEquiv S1 S1 (mult x) =  lemPropFib P pP bP 
 where P (x:S1) : U            = isEquiv S1 S1 (mult x)
       pP (x:S1) : prop (P x)  = propIsEquiv S1 S1 (mult x)
       rem : Id (S1 -> S1) (idfun S1) (mult base) = <i>\ (x:S1) -> idL x @ -i
       bP : P base = subst (S1->S1) (isEquiv S1 S1)  (idfun S1) (mult base) rem (idIsEquiv S1)

-- inverse of multiplication by x

invMult (x y:S1) : S1 = ((multIsEquiv x).1 y).1

invS1 (x:S1) : S1 = invMult x base

pt0 : S1 = mapOnPath S1 S1 invS1 base base loop2@0
test1 : S1 = mapOnPath S1 S1 invS1 base base loop2@1

invsone : sone -> sone  = subst U (\ (X:U) -> X -> X) S1 sone (<i>s1EqCircle@-i) invS1

cSone : Id U sone sone = <_>sone

pt1 : sone = 
 transport cSone
 (transport cSone
  (transport cSone
   (transport cSone
    (transport cSone
     (transport cSone
      (transport cSone
       (transport cSone
        (transport cSone
         (transport cSone (transport cSone north))))))))))

lemPt1 : Id sone north pt1 =
 <i> comp cSone
 (comp cSone
  (comp cSone
   (comp cSone
    (comp cSone
     (comp cSone
      (comp cSone
       (comp cSone
        (comp cSone
         (comp cSone (comp cSone north [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]) [(i=0)-><_>north]

transpSone (l:Id sone pt1 pt1) : Id sone north north =
 compId sone north pt1 north lemPt1 (compId sone pt1 pt1 north l (<i>lemPt1@-i))

-- take a lot of time and memory

test3 : Z = windingS (transpSone (<i>invsone (loop1S@i)))
test4 : Z = windingS (transpSone (<i>pt1))
test5 : Z = windingS (transpSone (<i>invsone (loop2S@i)))

{- take a lot of time to type-check
loopM2 : Id S1 pt0 test1 = mapOnPath S1 S1 invS1 base base loop2

loopM0 : Id S1 pt0 pt0 = <i>invMult (loop2@i) (loop2@i)
-}

