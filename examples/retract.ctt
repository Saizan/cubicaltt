module retract where

import prelude

section (A B : U) (f : A -> B) (g : B -> A) :U = (b : B) -> Id B (f (g b)) b

retract (A B : U) (f : A -> B) (g : B -> A) : U = section B A g f

lemRetract (A B : U) (f : A -> B) (g : B -> A) (rfg : retract A B f g) (x y:A) :
             Id A (g (f x)) (g (f y)) -> Id A x y
  = compUp A (g (f x)) x (g (f y)) y (rfg x) (rfg y)

retractProp (A B : U) (f : A -> B) (g : B -> A) (rfg : retract A B f g) (pB :prop B) (x y:A) 
  : Id A x y = lemRetract A B f g rfg x y (<i> g (pB (f x) (f y) @ i))

retractInv (A B : U)  (f : A -> B) (g : B -> A) (rfg : retract A B f g)
           (x y : A) (q: Id B (f x) (f y)) : Id A x y = 
  compUp A (g (f x)) x (g (f y)) y (rfg x) (rfg y) (<i> (g (q @ i)))

-- lemRSquare (A B : U)  (f : A -> B) (g : B -> A) (rfg: retract A B f g)(x y:A) (p : Id A x y) :
--   Square A (g (f x)) (g (f y)) (<i> g (f (p @ i))) x y
--     (retractInv A B f g rfg x y (<i> f (p@ i))) (rfg x) (rfg y) =
--   <j i> comp A (g (f (p @ j))) [(j=0) -> <l> (rfg x) @ (i/\l), (j=1) -> <l> (rfg y) @ (i/\l)]

-- retractId (A B : U)(f : A -> B) (g : B -> A) (rfg : retract A B f g) (x y :A) (p:Id A x y) :
--       Id (Id A x y) (retractInv A B f g rfg x y (<i> f (p@ i))) p =
--   <i j> comp A (g (f (p @ j))) [(j=0) -> rfg x,(j=1) -> rfg y,
--              (i=0) -> (lemRSquare A B f g rfg x y p) @ j,(i=1) -> rfg (p @ j)]

-- retractSet (A B : U) (f : A -> B) (g : B -> A) (rfg : retract A B f g)
--            (sB : set B) (x y : A) : prop (Id A x y) =
--   retractProp (Id A x y) (Id B (f x) (f y)) (mapOnPath A B f x y)
--     (retractInv A B f g rfg x y) (retractId A B f g rfg x y) (sB (f x) (f y))

